generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CartItem {
  id        Int       @id @default(autoincrement())
  cartId    Int
  itemId    Int
  quantity  Int
  createdAt DateTime? @default(now())
  updatedAt DateTime?
  cart      Cart      @relation(fields: [cartId], references: [id])
  item      Item      @relation(fields: [itemId], references: [id])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  createdAt DateTime?  @default(now())
  updatedAt DateTime?
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CheckoutTemp {
  id            Int       @id @default(autoincrement())
  userId        Int
  lastName      String
  firstName     String
  email         String
  postCode      String
  prefecture    String
  city          String
  street        String
  building      String?
  phoneNumber   String
  paymentMethod String
  createdAt     DateTime? @default(now())
  updatedAt     DateTime?
  user          User      @relation(fields: [userId], references: [id])
}

model Country {
  id       Int     @id
  name     String
  isoCode  String
  isActive Boolean
  items    Item[]
}

model Item {
  name        String?     @unique
  price       Int?
  stock       Int?
  createdAt   DateTime?   @default(now())
  abv         Float?
  countriesId Int?
  image       String?
  isSoldOut   Boolean     @default(false)
  itemDetails String?     @db.VarChar(510)
  nameEnglish String?     @unique
  salesCount  Int?
  updatedAt   DateTime?
  volume      Int?
  id          Int         @id
  cartItems   CartItem[]
  country     Country?    @relation(fields: [countriesId], references: [id])
  orderItems  OrderItem[]
}

model OrderItem {
  createdAt DateTime? @default(now())
  price     Int
  quantity  Int
  updatedAt DateTime?
  id        Int       @id @default(autoincrement())
  orderId   Int
  itemId    Int
  item      Item      @relation(fields: [itemId], references: [id])
  order     Order     @relation(fields: [orderId], references: [id])
}

model Order {
  createdAt     DateTime?   @default(now())
  building      String?
  city          String
  email         String
  firstName     String
  lastName      String
  paymentMethod String
  paymentTotal  Int
  phoneNumber   String
  postCode      String
  prefecture    String
  shippingFee   Int
  street        String
  totalPrice    Int
  updatedAt     DateTime?
  id            Int         @id @default(autoincrement())
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  orderItems    OrderItem[]
}

model User {
  password      String
  createdAt     DateTime       @default(now())
  birthday      DateTime?
  building      String?
  city          String
  firstName     String
  firstNameKana String?
  isDeleted     Boolean        @default(false)
  lastLoginAt   DateTime?
  lastName      String
  lastNameKana  String?
  phoneNumber   String
  postCode      String
  prefecture    String
  role          String         @default("user")
  street        String
  updatedAt     DateTime       @updatedAt
  id            Int            @id @default(autoincrement())
  email         String         @unique
  carts         Cart?
  checkoutTemps CheckoutTemp[]
  orders        Order[]
  checkoutTokens CheckoutToken[]
}

model CheckoutToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}